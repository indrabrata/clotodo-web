{"version":3,"sources":["clotodo_web/api.cljs"],"mappings":";AAIA,0BAAA,1BAAKA;AAEL,8BAAA,9BAAMC;AAAN,AAAA,kDAAA,gBACmB,CAAA,sDAAA,AAAAC,gBAAgBC;;AAEnC,yBAAA,zBAAMC,0DAAQC,MAAMC,SAASC,SAASC;AAAtC,AACE,+JAAA,2CAAA,wDAAA,2CAAA,6DAAA,sEAAA,6EAAA,0DAAA,qDAAA,2EAAA,qDAAA,8DAAA,KAAA,oEAAA,uEAAA,n7BAACC,oDAAK,yBAAA,xBAAKT,wSACYK,mEAAgBC,qEAAmBC,8XAI1CC;AALhB,AAMuB,qDAAA,9CAACE,sBAAOC;;;AAEjC,yBAAA,zBAAMC,0DAAQP,MAAME,SAASC;AAA7B,AACE,+JAAA,2CAAA,wDAAA,2CAAA,6DAAA,6EAAA,0DAAA,qDAAA,2EAAA,qDAAA,8DAAA,KAAA,oEAAA,uEAAA,72BAACC,oDAAK,yBAAA,xBAAKT,wSACYK,kEAAgBE,8XAIvBC;AALhB,AAMuB,qDAAA,9CAACE,sBAAOC;;;AAEjC,4BAAA,5BAAME,gEAAWL;AAAjB,AACE,wJAAA,2CAAA,yFAAA,2EAAA,qDAAA,8DAAA,KAAA,oEAAA,uEAAA,nmBAACM,mDAAI,yBAAA,xBAAKd,mMACK,AAACC,4RAGDO;AAJf,AAKsB,qDAAA,9CAACE,sBAAOC;;;AAEhC,8BAAA,9BAAMI,oEAAaC,KAAKC,UAAUT;AAAlC,AACE,yJAAA,2CAAA,yFAAA,wDAAA,2CAAA,0DAAA,kFAAA,0DAAA,qDAAA,2EAAA,qDAAA,8DAAA,KAAA,oEAAA,uEAAA,l8BAACC,oDAAK,yBAAA,xBAAKT,mMACK,AAACC,sLACKe,qEAAgBC,+XAItBT;AANhB,AAOuB,qDAAA,9CAACE,sBAAOC;;;AAEjC,4BAAA,5BAAMO,gEAAWC,YAAYX;AAA7B,AACE,8JAAA,2CAAA,yFAAA,wDAAA,2CAAA,uFAAA,0DAAA,qDAAA,2EAAA,qDAAA,8DAAA,KAAA,oEAAA,uEAAA,l5BAACC,oDAAK,yBAAA,xBAAKT,wMACK,AAACC,oMACYkB,iYAIbX;AANhB,AAOuB,qDAAA,9CAACE,sBAAOC","names":["clotodo-web.api/api-url","clotodo-web.api/auth-header","cljs.core/deref","clotodo-web.state/token","clotodo-web.api/signup","email","username","password","callback","ajax.core.POST","cljs.core/reset!","clotodo-web.state/error","clotodo-web.api/signin","clotodo-web.api/get-rooms","ajax.core.GET","clotodo-web.api/create-room","name","is-public","clotodo-web.api/join-room","access-code"],"sourcesContent":["(ns clotodo-web.api\n  (:require [clotodo-web.state :as state]\n            [ajax.core :refer [POST GET]]))\n\n(def api-url \"http://localhost:3000/api\")\n\n(defn auth-header []\n  {\"Authorization\" (str \"Bearer \" @state/token)}) ; Changed from \"Token \" to \"Bearer \"\n\n(defn signup [email username password callback]\n  (POST (str api-url \"/auth/signup\")\n        {:params {:email email :username username :password password}\n         :format :json\n         :response-format :json\n         :keywords? true\n         :handler callback\n         :error-handler #(reset! state/error \"Signup failed\")}))\n\n(defn signin [email password callback]\n  (POST (str api-url \"/auth/signin\")\n        {:params {:email email :password password}\n         :format :json\n         :response-format :json\n         :keywords? true\n         :handler callback\n         :error-handler #(reset! state/error \"Invalid credentials\")}))\n\n(defn get-rooms [callback]\n  (GET (str api-url \"/rooms\")\n       {:headers (auth-header)\n        :response-format :json\n        :keywords? true\n        :handler callback\n        :error-handler #(reset! state/error \"Failed to load rooms\")}))\n\n(defn create-room [name is-public callback]\n  (POST (str api-url \"/rooms\")\n        {:headers (auth-header)\n         :params {:name name :is_public is-public}\n         :format :json\n         :response-format :json\n         :keywords? true\n         :handler callback\n         :error-handler #(reset! state/error \"Failed to create room\")}))\n\n(defn join-room [access-code callback]\n  (POST (str api-url \"/rooms/join\")\n        {:headers (auth-header)\n         :params {:access_code access-code}\n         :format :json\n         :response-format :json\n         :keywords? true\n         :handler callback\n         :error-handler #(reset! state/error \"Invalid room code\")}))"]}