{"version":3,"sources":["reagent/impl/template.cljs"],"mappings":"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","names":["this__5310__auto__","writer__5311__auto__","opt__5312__auto__","cljs.core/-write","reagent.impl.template/UnsafeHTML","reagent.impl.template/->UnsafeHTML","s","reagent.impl.template/re-tag","reagent.impl.template/NativeWrapper","reagent.impl.template/->NativeWrapper","tag","id","className","reagent.impl.template/adapt-react-class","c","reagent.impl.template/hiccup-tag?","x","reagent.impl.util/named?","reagent.impl.template/reagent-fn-component?","reagent.impl.template/valid-tag?","cljs.core/ifn?","reagent.impl.template/prop-name-cache","reagent.impl.template/cache-get","o","k","reagent.impl.template.goog$module$goog$object.get","reagent.impl.template/cached-prop-name","temp__5825__auto__","k'","cljs.core/name","v","reagent.impl.util/dash-to-prop-name","reagent.impl.template.goog$module$goog$object.set","reagent.impl.template/kv-conv","G__21559","reagent.impl.template/convert-prop-value","reagent.impl.util/js-val?","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","args","cljs.core.apply","reagent.impl.template/custom-prop-name-cache","reagent.impl.template/cached-custom-prop-name","reagent.impl.template/custom-kv-conv","G__21565","reagent.impl.template/convert-custom-prop-value","reagent.impl.template/set-id-class","props","id-class","class","G__21579","cljs.core.assoc","reagent.impl.util.class_names","or__5025__auto__","reagent.impl.template/convert-props","G__21590","js-props","temp__5823__auto__","d","and__5023__auto__","reagent.impl.template/make-element","this","argv","component","jsprops","first-child","G__21597","cljs.core/count","js/module$node_modules$react$index.createElement","reagent.impl.protocols/as-element","cljs.core.nth","a","reagent.impl.template/HiccupTag","reagent.impl.template/->HiccupTag","custom","reagent.impl.template/parse-tag","hiccup-tag","vec__21605","cljs.core/re-matches","cljs.core/next","clojure.string/replace","js/Error","reagent.impl.component/comp-name","cljs.core.not_EQ_","reagent.impl.template/reag-element","compiler","reagent.impl.component/as-class","temp__5827__auto__","key","reagent.impl.util/react-key-from-vec","reagent.impl.template/defc-element","cljs.core.subvec","reagent.impl.template/function-element","first-arg","reagent.impl.component/functional-render-fn","reagent.impl.template/maybe-function-element","reagent.impl.component/react-class?","reagent.impl.template/fragment-element","hasprops","reagent.impl.protocols/make-element","js/module$node_modules$react$index.Fragment","reagent.impl.template/tag-name-cache","reagent.impl.template/cached-parse","_","reagent.impl.template/native-element","parsed","first","reagent.impl.input/input-component?","react-key","reagent.impl.util/get-react-key","input-class","reagent.impl.component/create-class","reagent.impl.input/input-spec","cljs.core/with-meta","cljs.core.merge","cljs.core/meta","reagent.impl.template/raw-element","comp","reagent.impl.template/expand-seq","cljs.core.into_array","p1__21653#","cljs.core.map","reagent.impl.template/expand-seq-dev","val","cljs.core/vector?","reagent.impl.template/expand-seq-check","vec__21658","ctx","res","derefed","reagent.ratom/check-derefs","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","reagent.impl.util.hiccup_err","reagent.impl.template/hiccup-element","n","pos","G__21672","reagent.impl.protocols/parse-tag","cljs.core._EQ_","cljs.core.subs","reagent.impl.template/vec-to-elem","fn-to-element","js/console.error","cljs.core.pr_str","G__21677","cljs.core/Keyword","reagent.impl.template/as-element","cljs.core/seq?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","reagent.impl.template/create-compiler","opts","cljs.core.gensym","parse-fn","cljs.core.get","reagent.impl.template/t_reagent$impl$template21725","tag-name","tag-value","reagent.impl.template/class-compiler","reagent.impl.template/*current-default-compiler*","reagent.impl.template/set-default-compiler!"],"sourcesContent":["(ns reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [reagent.impl.util :as util :refer [named?]]\n            [reagent.impl.component :as comp]\n            [reagent.impl.input :as input]\n            [reagent.impl.protocols :as p]\n            [reagent.ratom :as ratom]\n            [reagent.debug :refer-macros [dev? warn]]\n            [goog.object :as gobj]))\n\n(deftype UnsafeHTML [s])\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [tag id className])\n\n(defn adapt-react-class\n  [c]\n  (->NativeWrapper c nil nil))\n\n;;; Common utilities\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean reagent-fn-component? [^clj x]\n  (.-reagent-component x))\n\n(defn ^boolean valid-tag? [^clj x]\n  (or (hiccup-tag? x)\n      (reagent-fn-component? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n;;; Props conversion\n\n;; TODO: Move prop-name caches to the compiler object, if this\n;; conversion can be configured.\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (gobj/get o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (let [v (util/dash-to-prop-name k)]\n        (gobj/set prop-name-cache (name k) v)\n        v))\n    k))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (gobj/set (cached-prop-name k) (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (util/js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n;; Previous few functions copied for custom elements,\n;; without mapping from class to className etc.\n\n(def custom-prop-name-cache #js{})\n\n(defn cached-custom-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get custom-prop-name-cache (name k))]\n      k'\n      (let [v (util/dash-to-prop-name k)]\n        (gobj/set custom-prop-name-cache (name k) v)\n        v))\n    k))\n\n(defn custom-kv-conv [o k v]\n  (doto o\n    (gobj/set (cached-custom-prop-name k) (convert-prop-value v))))\n\n(defn convert-custom-prop-value [x]\n  (cond (util/js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv custom-kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn set-id-class\n  \"Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties.\"\n  [props id-class]\n  (let [id (.-id id-class)\n        class (.-className id-class)]\n    (cond-> props\n      ;; Only use ID from tag keyword if no :id in props already\n      (and (some? id)\n           (nil? (:id props)))\n      (assoc :id id)\n\n      ;; Merge classes\n      class\n      ;; Note: someone might use React-style :className property,\n      ;; this is the only place where that needs special case. Using\n      ;; :class and :className together is not supported.\n      (assoc :class (util/class-names class (or (:class props) (:className props)))))))\n\n(defn convert-props [props ^clj id-class]\n  (let [class (:class props)\n        props (-> props\n                  (cond-> class (assoc :class (util/class-names class)))\n                  (set-id-class id-class))\n        ^js js-props (if (.-custom id-class)\n                       (convert-custom-prop-value props)\n                       (convert-prop-value props))]\n    ;; Ensure only tagged values are used for dangerouslySetInnerHTML\n    (when-let [d (and js-props (.-dangerouslySetInnerHTML js-props))]\n      (if (instance? UnsafeHTML d)\n        (set! (.-dangerouslySetInnerHTML js-props) #js {:__html (.-s d)})\n        (js-delete js-props \"dangerouslySetInnerHTML\")))\n    js-props))\n\n;;; Conversion from Hiccup forms\n\n(defn make-element [this argv component jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement component jsprops)\n\n    1 (react/createElement component jsprops\n                           (p/as-element this (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                          (.push a (p/as-element this v)))\n                         a)\n                       #js [component jsprops] argv))))\n\n(deftype HiccupTag [tag id className custom])\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id className] (->> hiccup-tag name (re-matches re-tag) next)\n        className (when-not (nil? className)\n                    (string/replace className #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\" (comp/comp-name)))\n    (->HiccupTag tag\n                 id\n                 className\n                 ;; Custom element names must contain hyphen\n                 ;; https://www.w3.org/TR/custom-elements/#custom-elements-core-concepts\n                 (not= -1 (.indexOf tag \"-\")))))\n\n(defn reag-element [tag v compiler]\n  (let [c (comp/as-class tag compiler)\n        jsprops #js {}]\n    (set! (.-argv jsprops) v)\n    (when-some [key (util/react-key-from-vec v)]\n      (set! (.-key jsprops) key))\n    (react/createElement c jsprops)))\n\n(defn defc-element\n  \"Tag is a React function component already wrapped\n  with Reagent function component implementation. This function just\n  needs to wrap the Hiccup element children into the React element\n  properties and set up the optional React key if set.\"\n  [tag v]\n  (let [jsprops #js {}]\n    (set! (.-argv jsprops) (subvec v 1))\n    (when-some [key (util/react-key-from-vec v)]\n      (set! (.-key jsprops) key))\n    (react/createElement tag jsprops)))\n\n(defn function-element [tag v first-arg compiler]\n  (let [jsprops #js {}]\n    (set! (.-reagentRender jsprops) tag)\n    (set! (.-argv jsprops) (subvec v first-arg))\n    ; (set! (.-opts jsprops) opts)\n    (when-some [key (util/react-key-from-vec v)]\n      (set! (.-key jsprops) key))\n    (react/createElement (comp/functional-render-fn compiler tag) jsprops)))\n\n(defn maybe-function-element\n  \"If given tag is a Class, use it as a class,\n  else wrap in Reagent function wrapper.\"\n  [tag v compiler]\n  (if (comp/react-class? tag)\n    (reag-element tag v compiler)\n    (function-element tag v 1 compiler)))\n\n(defn fragment-element [argv compiler]\n  (let [props (nth argv 1 nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (or (convert-prop-value (if hasprops props))\n                    #js {})\n        first-child (+ 1 (if hasprops 1 0))]\n    (when-some [key (util/react-key-from-vec argv)]\n      (set! (.-key jsprops) key))\n    (p/make-element compiler argv react/Fragment jsprops first-child)))\n\n(def tag-name-cache #js {})\n\n(defn cached-parse [this x _]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (let [v (parse-tag x)]\n      (gobj/set tag-name-cache x v)\n      v)))\n\n;; This is used for html elements (:h1, :input) and also React component with :>/adapt-react-class\n(defn native-element [parsed argv first ^p/Compiler compiler]\n  (let [component (.-tag parsed)\n        props (nth argv first nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (or (convert-props (if hasprops props) parsed)\n                    #js {})\n        first-child (+ first (if hasprops 1 0))]\n    (if (input/input-component? component)\n      (let [;; Also read :key from props map, because\n            ;; input wrapper will not place the key in useful place.\n            react-key (util/get-react-key props)\n            input-class (or (.-reagentInput compiler)\n                            (let [x (comp/create-class input/input-spec compiler)]\n                              (set! (.-reagentInput compiler) x)\n                              x))]\n        (p/as-element\n          compiler\n          (with-meta [input-class argv component jsprops first-child compiler]\n                     (merge (when react-key\n                              {:key react-key})\n                            (meta argv)))))\n      (do\n        (when-some [key (-> (meta argv) util/get-react-key)]\n          (set! (.-key jsprops) key))\n        (p/make-element compiler argv component jsprops first-child)))))\n\n(defn raw-element [comp argv compiler]\n  (let [props (nth argv 2 nil)\n        jsprops (or props #js {})]\n    ;; If we have key attached to vector metadata, copy that to the\n    ;; jsprops.\n    ;; Often the key is already on the jsprops.\n    (when-some [key (-> (meta argv) util/get-react-key)]\n      (set! (.-key jsprops) key))\n    (p/make-element compiler argv comp jsprops 3)))\n\n(defn expand-seq [s compiler]\n  (into-array (map #(p/as-element compiler %) s)))\n\n(defn expand-seq-dev [s ^clj o compiler]\n  (into-array (map (fn [val]\n                     (when (and (vector? val)\n                                (nil? (util/react-key-from-vec val)))\n                       (set! (.-no-key o) true))\n                     (p/as-element compiler val))\n                   s)))\n\n(defn expand-seq-check [x compiler]\n  (let [ctx #js {}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx compiler))]\n    (when derefed\n      (warn (util/hiccup-err x (comp/comp-name) \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when (.-no-key ctx)\n      (warn (util/hiccup-err x (comp/comp-name) \"Every element in a seq should have a unique :key\")))\n    res))\n\n(defn hiccup-element [v compiler]\n  (let [tag (nth v 0 nil)\n        n (name tag)\n        pos (.indexOf n \">\")]\n    (case pos\n      -1 (native-element (p/parse-tag compiler n tag) v 1 compiler)\n      0 (assert (= \">\" n) (util/hiccup-err v (comp/comp-name) \"Invalid Hiccup tag\"))\n      ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n      ;; Apply metadata (e.g. :key) to the outermost element.\n      ;; Metadata is probably used only with sequeneces, and in that case\n      ;; only the key of the outermost element matters.\n      (recur (with-meta [(subs n 0 pos)\n                         (assoc (with-meta v nil) 0 (subs n (inc pos)))]\n                        (meta v))\n             compiler))))\n\n(defn vec-to-elem [v compiler fn-to-element]\n  (when (nil? compiler)\n    (js/console.error \"vec-to-elem\" (pr-str v)))\n  (assert (pos? (count v)) (util/hiccup-err v (comp/comp-name) \"Hiccup form should not be empty\"))\n  (let [^clj tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (util/hiccup-err v (comp/comp-name) \"Invalid Hiccup form\"))\n    (case tag\n      :> (native-element (->HiccupTag (nth v 1 nil) nil nil nil) v 2 compiler)\n      :r> (raw-element (nth v 1 nil) v compiler)\n      :f> (function-element (nth v 1 nil) v 2 compiler)\n      :<> (fragment-element v compiler)\n      (cond\n       (reagent-fn-component? tag)\n       (defc-element tag v)\n\n       (hiccup-tag? tag)\n       (hiccup-element v compiler)\n\n       (instance? NativeWrapper tag)\n       (native-element tag v 1 compiler)\n\n       :else (fn-to-element tag v compiler)))))\n\n(defn as-element [this x fn-to-element]\n  (cond (util/js-val? x) x\n        (vector? x) (vec-to-elem x this fn-to-element)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x this)\n                   (expand-seq x this))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(defn create-compiler [opts]\n  (let [id (gensym \"reagent-compiler\")\n        fn-to-element (if (:function-components opts)\n                        maybe-function-element\n                        reag-element)\n        parse-fn (get opts :parse-tag cached-parse)]\n\n    (reify p/Compiler\n      ;; This is used to as cache key to cache component fns per compiler\n      (get-id [this] id)\n      (parse-tag [this tag-name tag-value]\n        (parse-fn this tag-name tag-value))\n      (as-element [this x]\n        (as-element this x fn-to-element))\n      (make-element [this argv component jsprops first-child]\n        (make-element this argv component jsprops first-child)))))\n\n(def class-compiler (create-compiler {}))\n(def ^:dynamic *current-default-compiler* class-compiler)\n\n(defn set-default-compiler! [compiler]\n  (set! *current-default-compiler* compiler))\n"],"x_google_ignoreList":[0]}