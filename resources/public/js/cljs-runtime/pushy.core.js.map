{"version":3,"sources":["pushy/core.cljs"],"mappings":"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","names":["pushy.core/on-click","funk","goog.events/listen","js/document","pushy.core/update-history!","h","G__21471","pushy.core/set-retrieve-token!","t","path-prefix","location","pushy.core/set-create-url!","token","var_args","G__21502","pushy.core/new-history","js/Error","pushy.core.new_history","js/goog.history.Html5History.TokenTransformer","transformer","js/goog.history.Html5History","js/window","pushy$core$IHistory$set_token_BANG_$dyn","x__5373__auto__","m__5374__auto__","pushy.core/set-token!","goog/typeOf","m__5372__auto__","cljs.core/missing-protocol","G__21512","pushy$core$IHistory$replace_token_BANG_$dyn","pushy.core/replace-token!","G__21524","pushy$core$IHistory$get_token$dyn","pushy.core/get-token","pushy$core$IHistory$start_BANG_$dyn","pushy.core/start!","pushy$core$IHistory$stop_BANG_$dyn","pushy.core/stop!","pushy.core/IHistory","this","title","pushy.core/processable-url?","uri","clojure.string/blank?","cljs.core/not","cljs.core/re-matches","cljs.core/re-pattern","js/location","pushy.core/get-token-from-uri","path","query","cljs.core/empty?","args__5755__auto__","len__5749__auto__","i__5750__auto__","argseq__5756__auto__","cljs.core/IndexedSeq","pushy.core/pushy","p__21556","map__21557","cljs.core/--destructure-map","cljs.core.get","seq21552","G__21553","cljs.core/first","cljs.core/next","G__21554","self__5734__auto__","dispatch-fn","match-fn","processable-url?","identity-fn","prevent-default-when-no-match?","cljs.core/identity","cljs.core/constantly","history","event-keys","cljs.core.atom","pushy.core/t_pushy$core21560","_","cljs.core.swap_BANG_","cljs.core/conj","goog.history.EventType/NAVIGATE","e","temp__5823__auto__","match","G__21576","G__21578","G__21580","G__21581","el","G__21589","js/goog.Uri","and__5023__auto__","cljs.core._EQ_","next-token","G__21598","temp__5821__auto__","seq__21601","cljs.core/seq","cljs.core/deref","chunk__21602","count__21603","i__21604","cljs.core/chunked-seq?","c__5548__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","key","goog.events/unlistenByKey","cljs.core/reset!","G__21624","pushy.core/supported?","pushy.core.supported_QMARK_","window","G__21627","pushy.core/push-state!","pushy.core.push_state_BANG_","pushy.core.pushy"],"sourcesContent":["(ns pushy.core\n  (:require [goog.events :as events]\n            [clojure.string])\n  (:import goog.History\n           goog.history.Html5History\n           goog.history.Html5History.TokenTransformer\n           goog.history.EventType\n           goog.Uri))\n\n(defn- on-click [funk]\n  (events/listen js/document \"click\" funk))\n\n(defn- update-history! [h]\n  (doto h\n    (.setUseFragment false)\n    (.setPathPrefix \"\")\n    (.setEnabled true)))\n\n(defn- set-retrieve-token! [t]\n  (set! (.. t -retrieveToken)\n        (fn [path-prefix location]\n          (str (.-pathname location) (.-search location))))\n  t)\n\n(defn- set-create-url! [t]\n  (set! (.. t -createUrl)\n        (fn [token path-prefix location]\n          (str path-prefix token)))\n  t)\n\n(defn new-history\n  ([]\n   (new-history (-> (TokenTransformer.) set-retrieve-token! set-create-url!)))\n  ([transformer]\n   (-> (Html5History. js/window transformer) update-history!)))\n\n(defprotocol IHistory\n  (set-token! [this token] [this token title])\n  (replace-token! [this token] [this token title])\n  (get-token [this])\n  (start! [this])\n  (stop! [this]))\n\n(defn- processable-url? [uri]\n  (and (not (clojure.string/blank? uri))                    ;; Blank URLs are not processable.\n       (or (and (not (.hasScheme uri)) (not (.hasDomain uri))) ;; By default only process relative URLs + URLs matching window's origin\n           (some? (re-matches (re-pattern (str \"^\" (.-origin js/location) \".*$\"))\n                              (str uri))))))\n\n(defn- get-token-from-uri [uri]\n  (let [path (.getPath uri)\n        query (.getQuery uri)]\n    ;; Include query string in token\n    (if (empty? query) path (str path \"?\" query))))\n\n(defn pushy\n  \"Takes in three functions:\n    * dispatch-fn: the function that dispatches when a match is found\n    * match-fn: the function used to check if a particular route exists\n    * identity-fn: (optional) extract the route from value returned by match-fn\"\n  [dispatch-fn match-fn &\n   {:keys [processable-url? identity-fn prevent-default-when-no-match?]\n    :or   {processable-url?               processable-url?\n           identity-fn                    identity\n           prevent-default-when-no-match? (constantly false)}}]\n\n  (let [history (new-history)\n        event-keys (atom nil)]\n    (reify\n      IHistory\n      (set-token! [_ token]\n        (. history (setToken token)))\n      (set-token! [_ token title]\n        (. history (setToken token title)))\n\n      (replace-token! [_ token]\n        (. history (replaceToken token)))\n      (replace-token! [_ token title]\n        (. history (replaceToken token title)))\n\n      (get-token [_]\n        (.getToken history))\n\n      (start! [this]\n        (stop! this)\n        ;; We want to call `dispatch-fn` on any change to the location\n        (swap! event-keys conj\n               (events/listen history EventType.NAVIGATE\n                              (fn [e]\n                                (when-let [match (-> (.-token e) match-fn identity-fn)]\n                                  (dispatch-fn match)))))\n\n        ;; Dispatch on initialization\n        (when-let [match (-> (get-token this) match-fn identity-fn)]\n          (dispatch-fn match))\n\n        (swap! event-keys conj\n               (on-click\n                (fn [e]\n                  (when-let [el (some-> e .-target (.closest \"a\"))]\n                    (let [uri (.parse Uri (.-href el))]\n                      ;; Proceed if `identity-fn` returns a value and\n                      ;; the user did not trigger the event via one of the\n                      ;; keys we should bypass\n                      (when (and (processable-url? uri)\n                                 ;; Bypass dispatch if any of these keys\n                                 (not (.-altKey e))\n                                 (not (.-ctrlKey e))\n                                 (not (.-metaKey e))\n                                 (not (.-shiftKey e))\n                                 ;; Bypass if target = _blank\n                                 (not (get #{\"_blank\" \"_self\"} (.getAttribute el \"target\")))\n                                 ;; Bypass if explicitly instructed to ignore this element\n                                 (or (not (.hasAttribute el \"data-pushy-ignore\"))\n                                     (= (.getAttribute el \"data-pushy-ignore\") \"false\"))\n                                 ;; Only dispatch on left button click\n                                 (= 0 (.-button e)))\n                        (let [next-token (get-token-from-uri uri)]\n                          (if (identity-fn (match-fn next-token))\n                            ;; Dispatch!\n                            (do\n                              (if-let [title (-> el .-title)]\n                                (set-token! this next-token title)\n                                (set-token! this next-token))\n                              (.preventDefault e))\n\n                            (when (prevent-default-when-no-match? next-token)\n                              (.preventDefault e))))))))))\n        nil)\n\n      (stop! [this]\n        (doseq [key @event-keys]\n          (events/unlistenByKey key))\n        (reset! event-keys nil)))))\n\n(defn supported?\n  \"Returns whether Html5History is supported\"\n  ([] (supported? js/window))\n  ([window] (.isSupported Html5History window)))\n\n;; Backwards compatibility with pushy <= 0.2.2\n(defn push-state!\n  ([dispatch-fn match-fn]\n   (push-state! dispatch-fn match-fn identity))\n  ([dispatch-fn match-fn identity-fn]\n   (let [h (pushy dispatch-fn match-fn :identity-fn identity-fn)]\n     (start! h)\n     h)))\n"],"x_google_ignoreList":[0]}